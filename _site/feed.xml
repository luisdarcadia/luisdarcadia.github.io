<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-02T16:44:21-02:00</updated><id>http://localhost:4000/</id><title type="html">DeMachinaMundi</title><subtitle>Website pessoal de Luís Fernando Campos D'Arcadia.</subtitle><author><name>Luís Fernando Campos D'Arcadia</name></author><entry><title type="html">Latex e Git e Dropbox</title><link href="http://localhost:4000/rascunho/2017/12/28/latex-git-dropbox.html" rel="alternate" type="text/html" title="Latex e Git e Dropbox" /><published>2017-12-28T05:32:35-02:00</published><updated>2017-12-28T05:32:35-02:00</updated><id>http://localhost:4000/rascunho/2017/12/28/latex-git-dropbox</id><content type="html" xml:base="http://localhost:4000/rascunho/2017/12/28/latex-git-dropbox.html">&lt;p&gt;[git][https://git-scm.com/]&lt;/p&gt;

&lt;p&gt;Depois de adotar o &lt;em&gt;LaTeX&lt;/em&gt; e o &lt;em&gt;git&lt;/em&gt;, os dias de &lt;code class=&quot;highlighter-rouge&quot;&gt;versãofinal.doc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;versãofinal2.docx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;versaofinal-agoravai.doc&lt;/code&gt; acabaram.&lt;/p&gt;

&lt;p&gt;[Git][git] é um sistema de controle de versão de arquivos.
 Usado principalmente no desenvolvimento de softwares, é ideal para manter a integridade de projetos baseados em arquivos de texto, como códigos-fonte e… minha tese.&lt;/p&gt;

&lt;p&gt;Um segundo projeto do criador o Linux, [Linux Torvalds], o sistema ganha destaque por ser descentralizado, sendo ao mesmo seguro com os dados e flexível quanto às flutuações no código-fonte.
A segurança dos dados é garantida pela descentralidade: mesmo que o repositório remoto seja perdido, os dados permanecem na árvores de trabalho locais.
Quanto às flutuações no código, a diferença entre os arquivos de texto é “monitorada”, havendo mecanismos de comparação e mescla de diferenças no texto, mesmo havendo várias árvores de trabalho simultâneas.&lt;/p&gt;</content><author><name>Luís</name></author><summary type="html">[git][https://git-scm.com/]</summary></entry><entry><title type="html">Cheatsheet VIM</title><link href="http://localhost:4000/rascunho/2017/12/26/vim-atalhos-que-mais-uso.html" rel="alternate" type="text/html" title="Cheatsheet VIM" /><published>2017-12-26T05:00:00-02:00</published><updated>2017-12-26T05:00:00-02:00</updated><id>http://localhost:4000/rascunho/2017/12/26/vim-atalhos-que-mais-uso</id><content type="html" xml:base="http://localhost:4000/rascunho/2017/12/26/vim-atalhos-que-mais-uso.html">&lt;h2 id=&quot;modo-comando&quot;&gt;modo comando&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;acesso com “:” durante &lt;em&gt;modo normal&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;é a &lt;em&gt;barra de menu&lt;/em&gt; do vim, juntamente com o &lt;em&gt;vimrc&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;comando &lt;em&gt;w&lt;/em&gt; salva o texto (write)&lt;/li&gt;
      &lt;li&gt;comando &lt;em&gt;q&lt;/em&gt; sai do editor (quit)&lt;/li&gt;
      &lt;li&gt;comando &lt;em&gt;e&lt;/em&gt; cria/abre arquivo novo&lt;/li&gt;
      &lt;li&gt;comando &lt;em&gt;h&lt;/em&gt; oferece ajuda sobre algum comando&lt;/li&gt;
      &lt;li&gt;comando &lt;em&gt;!&lt;/em&gt; pode executar comandos do shell&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modo-normal&quot;&gt;modo normal&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;        k
    h - | - l
        j
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;modo para movimentação&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;w&lt;/em&gt; próxima palavra&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;b&lt;/em&gt; palavra anterior&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;f&lt;/em&gt; movimenta até o caracter na linhas&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;F&lt;/em&gt; movimenta até caracter antes na linha&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;{&lt;/em&gt; e &lt;em&gt;}&lt;/em&gt; para blocos de texto&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;gg&lt;/em&gt; início do arquivo&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;G&lt;/em&gt; fim do arquivo&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;0&lt;/em&gt; primeiro caracter da linha&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;$&lt;/em&gt; até o último caracter da linha&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Ctrl+y&lt;/em&gt; e &lt;em&gt;Ctrl+e&lt;/em&gt; mover a tela&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;modo para edição do texto
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;d&lt;/em&gt; deletar conforme o argumento&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;dd&lt;/em&gt; - deleta a linha&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;y&lt;/em&gt; usado para copiar (yank)&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;yy&lt;/em&gt; copiar a linha toda&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;p&lt;/em&gt; usado par colar (paste), etc.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;pp&lt;/em&gt; cola a linha inteira&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;comandos adicionais
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;x&lt;/em&gt; deleta um caracter sob o cursor&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;r&lt;/em&gt; substitui o caracter sob o cursor&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;~&lt;/em&gt; altera o caracter em maiúsculo/minúsculo&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Ctrl+a&lt;/em&gt; incrementa o número (1)&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Ctrl+x&lt;/em&gt; decrementa o número (11)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;comandos seguem a &lt;em&gt;sintaxe&lt;/em&gt; do vim&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;(número)(ação)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Frase para exemplos que legal haha&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;modo-de-inserção&quot;&gt;modo de inserção&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;usado para escrever&lt;/li&gt;
  &lt;li&gt;i para entrar em inserção
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;a&lt;/em&gt; entra em inserção depois do caracter&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;I&lt;/em&gt; entra em inserção no início da linha&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;A&lt;/em&gt; entra em inserção no final da linha&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;s&lt;/em&gt; deleta um caracter sob o cursor e entra em inserção&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;S&lt;/em&gt; deleta a linha e entra em inserção&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;c&lt;/em&gt; deleta conforme o argumento o entra em inserção&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;o&lt;/em&gt; cria uma linha abaixo e entra em inserção&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;O&lt;/em&gt; cria uma linha acima e entra em inserção&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ESC&lt;/em&gt; para sair da inserção&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modo-visual&quot;&gt;modo visual&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;seleciona texto em formatos que o modo normal não permita
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;v&lt;/em&gt; para entrar em modo visual&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;V&lt;/em&gt; para modo visual line&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Ctrl+v&lt;/em&gt; modo visual block&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modo-de-busca&quot;&gt;modo de busca&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;/&lt;/em&gt; ou &lt;em&gt;?&lt;/em&gt; em modo normal para acessar&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;n&lt;/em&gt; ou &lt;em&gt;N&lt;/em&gt; para percorrer arquivo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vantagens-do-vim&quot;&gt;vantagens do vim&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;gratuito e de código aberto&lt;/li&gt;
  &lt;li&gt;plugins desde linguagem de programação a Tex, e outro formatos plain text&lt;/li&gt;
  &lt;li&gt;escrita em &lt;em&gt;plain text&lt;/em&gt;, ou seja, sem distrações &lt;em&gt;sem distrações&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;documentos em plain text são imunes às mudanças nos  editores de texto&lt;/li&gt;
  &lt;li&gt;vim é 100% configurável&lt;/li&gt;
  &lt;li&gt;macros para edição
    &lt;ul&gt;
      &lt;li&gt;q q A , Esc k q&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;facilita automação para converter documentos&lt;/li&gt;
  &lt;li&gt;importante na atualidade, em que textos são distribuídos em formato digital e formatação pode variar&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Luís</name></author><summary type="html">modo comando</summary></entry><entry><title type="html">Sobre o VIM</title><link href="http://localhost:4000/blog/2017/12/25/sobre-o-vim.html" rel="alternate" type="text/html" title="Sobre o VIM" /><published>2017-12-25T05:00:00-02:00</published><updated>2017-12-25T05:00:00-02:00</updated><id>http://localhost:4000/blog/2017/12/25/sobre-o-vim</id><content type="html" xml:base="http://localhost:4000/blog/2017/12/25/sobre-o-vim.html">&lt;h1 id=&quot;um-editor-de-textos-na-linha-de-comando&quot;&gt;Um editor de textos na linha de comando&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;VI IMproved&lt;/em&gt; é uma extensão do &lt;a href=&quot;https://pt.wikipedia.org/wiki/Vi&quot;&gt;vi&lt;/a&gt; criada pelo programador holandês &lt;a href=&quot;http://www.moolenaar.net/&quot;&gt;Bram Moolenar&lt;/a&gt;. O programa, no entanto, não precisa se limitar à programação.
Escritores, &lt;em&gt;bloggers&lt;/em&gt;, jornalistas e estudantes fazem uso do programa, havendo uma série de &lt;em&gt;plugins&lt;/em&gt; criados para extender sua funcionalidade nesse sentido.&lt;/p&gt;

&lt;p&gt;Comecei utilizando o vim para editar arquivos de configuração do Linux na linha de comando.
O hábito que o Linux tem de pedir a edição de arquivos como usuário &lt;em&gt;root&lt;/em&gt; era trabalhoso.
Abrir um navegador de arquivos, rolar pela pasta até encontrar o arquivo e chamar o &lt;em&gt;gedit&lt;/em&gt; como root era um pouco irritante.
Nesse caso a linha de comando é a opção de demanda o menor esforço.
A busca por um editor na linha de comando ofereceu tanto o Nano quanto o Vim, e eu acabei optei pelo último.&lt;/p&gt;

&lt;p&gt;O hábito de usar o &lt;em&gt;vim&lt;/em&gt; então se mostrou bastante útil quando iniciei meu o interesse pela linguagem &lt;strong&gt;LaTeX&lt;/strong&gt;.
Essa combinação está se mostrando uma enorme ajuda para a redação da minha tese de doutorado.
Minha experiência de escrita está mais rápido e o ambiente da escrita, o que é mais importante, não possui distrações. 
Plugins como &lt;a href=&quot;https://github.com/junegunn/goyo.vim&quot;&gt;Goyo&lt;/a&gt; e &lt;a href=&quot;https://github.com/junegunn/limelight.vim&quot;&gt;Limelight&lt;/a&gt; contribuem ainda mais para isso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/goyo.gif&quot; alt=&quot;limegif&quot; /&gt;
&lt;em&gt;Minha rotina com a tese :)&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;esquecendo-o-mouse&quot;&gt;Esquecendo o mouse&lt;/h1&gt;

&lt;p&gt;Originalmente criado para o sistema operacional &lt;a href=&quot;https://pt.wikipedia.org/wiki/Unix&quot;&gt;Unix&lt;/a&gt;, o &lt;em&gt;vim&lt;/em&gt; procura seguir a “filosofia” que orientou o desenvolvimento daquele sistema: &lt;strong&gt;cada programa deve cumprir somente uma função e cumpri-la bem&lt;/strong&gt;.
Por esse mesmo motivo (olha a frase de efeito) o &lt;em&gt;vim&lt;/em&gt; é ao mesmo tempo limitado e sem limites.&lt;/p&gt;

&lt;p&gt;Diferente de editores de texto &lt;em&gt;WYSIWYG&lt;/em&gt;, ele trabalha somente com &lt;em&gt;plain text&lt;/em&gt;.
O programa não é capaz de preparar um texto para impressão.
Não é capaz de criar itálicos, negritos, rodapés, números de página, etc. Essa é a função de programas especializados e das linguagens &lt;em&gt;markup&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;No entanto, para a redação do texto em si, ou seja, o processo de inserir, apagar e alterar caracteres e palavras, o &lt;em&gt;vim&lt;/em&gt; é extremamente eficiente.
Sua relação com computadores mais antigos é também responsável por essa eficiência. Tendo em mente um usuário sem mouse.
Todas as funcionalidades do &lt;em&gt;vim&lt;/em&gt; são acessíveis sem que seja necessário afastar as mãos do &lt;em&gt;home row&lt;/em&gt; do teclado. Esse fato por si só torna o trabalho com o texto mais rápido.&lt;/p&gt;

&lt;p&gt;Não bastasse disso, grande parte da eficiência do &lt;em&gt;vim&lt;/em&gt; é fruto de sua maior peculiaridade: a modalidade.&lt;/p&gt;

&lt;h1 id=&quot;editor-modal&quot;&gt;Editor Modal&lt;/h1&gt;

&lt;p&gt;Quando escrevemos com lápis e papel, nunca nos movimentamos pelo texto com o lápis em contato com a página quando não estamos escrevendo.
Com essa mesma lógica o &lt;em&gt;vim&lt;/em&gt; possui modos diferentes para a redação e para a edição de um texto já escrito.&lt;/p&gt;

&lt;p&gt;Os modos do editor estão na colinha abaixo:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;

      &lt;ul&gt;
        &lt;li&gt;&lt;strong&gt;normal&lt;/strong&gt; - modo padrão, projetado para a movimentação e edição, acessível com &lt;code class=&quot;highlighter-rouge&quot;&gt;Esc&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + [&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;inserção&lt;/strong&gt; - modo para escrita em si, acessível com &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;visual&lt;/strong&gt; - modo para a seleção visual, ocorrendo por caractere &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;, por linha &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; ou (mais complicado) por bloco &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + v&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;comando&lt;/strong&gt; - modo da interface do usuário, com &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ao abrir o programa, o usuário se encontra em modo normal, que é o modo para movimentação e alteração do texto.
Para inserir texto, devemos entra no modo de &lt;em&gt;inserção&lt;/em&gt;, pressionando a tecla &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;. É nesse modo, e somente nesse modo, que o texto é inserido. Pressionamos &lt;code class=&quot;highlighter-rouge&quot;&gt;Esc&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + [&lt;/code&gt; para retornarmos ao modo normal.&lt;/p&gt;

&lt;p&gt;Toda a interação do usuário com o programa acontece pelo modo de comando, que é acessado pressionando a tecla &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; a partir do modo normal. Comando como sair &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;:quit&lt;/code&gt;, salvar (&lt;em&gt;write&lt;/em&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt; são passados por meio da linha de comando. Comando mais importante, no entanto, é a ajuda. Ao inserir &lt;code class=&quot;highlighter-rouge&quot;&gt;:h r&lt;/code&gt;, por exemplo, o programa informa qual a função da tecla r, o mesmo servindo para todas as teclas da &lt;em&gt;home row&lt;/em&gt; do teclado.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;vim&lt;/em&gt; ainda apresenta uma série de características interessantes, como a capacidade de concatenar com um sintaxe própria. Pretendo colocar aqui minhas “colinhas” sobre isso.&lt;/p&gt;</content><author><name>Luís</name></author><summary type="html"></summary></entry><entry><title type="html">Jekyll e _markdown_</title><link href="http://localhost:4000/blog/2017/12/22/primeiro-post.html" rel="alternate" type="text/html" title="Jekyll e _markdown_" /><published>2017-12-22T15:35:00-02:00</published><updated>2017-12-22T15:35:00-02:00</updated><id>http://localhost:4000/blog/2017/12/22/primeiro-post</id><content type="html" xml:base="http://localhost:4000/blog/2017/12/22/primeiro-post.html">&lt;h1 id=&quot;sobre-o-markdown&quot;&gt;Sobre o &lt;em&gt;markdown&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; é uma &lt;em&gt;markup language&lt;/em&gt; como &lt;em&gt;html&lt;/em&gt; e &lt;em&gt;LaTeX&lt;/em&gt;, ou seja, a escrita ocorre primeiramente em &lt;em&gt;plain text&lt;/em&gt; e formatação se dá a partir de marcações convencionadas, quando o código-fonte é compilado. Esse processo é diferente de editores como &lt;em&gt;Microsoft Word&lt;/em&gt;, &lt;em&gt;Libreoffice Writer&lt;/em&gt; ou &lt;em&gt;Pages&lt;/em&gt;, conhecidos como programas &lt;em&gt;WYSIWYG&lt;/em&gt; (&lt;em&gt;What you see is what you get&lt;/em&gt;). Editores de texto simples como &lt;em&gt;Notepad++&lt;/em&gt; e &lt;em&gt;Vim&lt;/em&gt; permitem um ambiente de escrita mais “limpo” e sem distrações, razão pela qual ela atraiu meu interese.&lt;/p&gt;

&lt;p&gt;Foi criada por &lt;a href=&quot;https://en.wikipedia.org/wiki/John_Gruber&quot;&gt;John Gruber&lt;/a&gt; um escritor e blogger americano, com o objetivo de facilitar a escrita e publicação &lt;em&gt;online&lt;/em&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; foi extendida em diversos “&lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown#Standardization&quot;&gt;sabores&lt;/a&gt;”, que variam quanto ao processo de compilação e nas convenções de marcação. O “sabor” utilizado aqui é o &lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;Github Flavoured Markdown&lt;/a&gt;, principalmente pela compilação automática proporcionada pela plataforma, além de oferecer mais recursos no momento da formatação.&lt;/p&gt;

&lt;p&gt;Depois de anos com editores de texto &lt;em&gt;WYSIWYG&lt;/em&gt;, apesar da “facilidade” superficial, estou convencido de que não são a melhor alternativa para a escrita mais “exigente” como a acadêmica. O contato direto com o texto e a formatação &lt;strong&gt;realmente consistente&lt;/strong&gt; de linguagens como a &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt; tornam impossível retornar ao Word. Ainda mais depois de ter contato com &lt;em&gt;Vim&lt;/em&gt; (o que é outro assunto).&lt;/p&gt;

&lt;p&gt;A convenção para a criação de um parágrafo é deixar uma linha em branco, por exemplo. A fonte destes mesmos parágrafos tem a seguinte aparência:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain-text&quot;&gt;[Markdown][Markdown] é uma *markup language* como *html* e *LaTeX*, ou seja, a escrita ocorre primeiramente em *plain text* e formatação se dá a partir de marcações convencionadas, quando o código-fonte é compilado. Esse processo é diferente de editores como *Microsoft Word*, *Libreoffice Writer* ou *Pages*, conhecidos como programas *WYSIWYG* (*What you see is what you get*). Editores de texto simples como *Notepad++* e *Vim* permitem um ambiente de escrita mais &quot;limpo&quot; e sem distrações, razão pela qual ela atraiu meu interese.

Foi criada por [John Gruber][JohnGruber] um escritor e blogger americano, com o objetivo de facilitar a escrita e publicação *online*, `Markdown` foi extendida em diversos &quot;[sabores][mdflavours]&quot;, que variam quanto ao processo de compilação e nas convenções de marcação. O &quot;sabor&quot; utilizado aqui é o [Github Flavoured Markdown][gitmd], principalmente pela compilação automática proporcionada pela plataforma, além de oferecer mais recursos no momento da formatação. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Títulos são criados usando o sinal &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; e subtítulos são iterações do mesmo sinal repetido, com os subníveis crescendo na mesma medida:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain-text&quot;&gt;## Subtítulo
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;subtítulo&quot;&gt;Subtítulo&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### Subsubtítulo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;h3 id=&quot;subsubtítulo&quot;&gt;Subsubtítulo&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Acima destaquei os exemplos utilizando &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, assim como demarquei blocos de código colocando o trecho entre acentos graves (&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;/code&gt;). Marcações como &lt;strong&gt;negrito&lt;/strong&gt; e &lt;em&gt;itálico&lt;/em&gt; são possíveis com o uso de arteriscos, e a versão do &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; oferecida pelo Github ainda permite o texto &lt;del&gt;tachado&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;O código fonte deste artigo está disponível publicamente no &lt;a href=&quot;https://raw.githubusercontent.com/luigi-finando/luigi-finando.github.io/master/_posts/2017-12-21-primeiro-post.markdown&quot;&gt;meu Github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-plataforma-jekyll-e-o-github-pages&quot;&gt;A plataforma &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll&lt;/a&gt; e o &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Essa plataforma, instalada como uma &lt;a href=&quot;https://en.wikipedia.org/wiki/RubyGems&quot;&gt;Ruby Gem&lt;/a&gt;, é uma combinação de &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt; e &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, sendo uma ferramenta para a geração de &lt;em&gt;websites&lt;/em&gt; estáticos.&lt;/p&gt;

&lt;p&gt;A integração com &lt;em&gt;markdown&lt;/em&gt; é essencial pois permite que a sintaxe Liquid e o uso de &lt;em&gt;Frontmatters &lt;a href=&quot;yaml.org&quot;&gt;YAML&lt;/a&gt;&lt;/em&gt; automatizem a geração de &lt;em&gt;htmls&lt;/em&gt; a partir de templates e pedaços de código.&lt;/p&gt;

&lt;p&gt;Ao executar &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new [nome da página]&lt;/code&gt;, Jekyll produz um ambiente de desenvolvimento com uma estrutura de pastas e o arquivo &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, permitindo ao usuário inserir criar layout e trechos de HTML reutilizáveis por meio da sintaxe &lt;em&gt;Liquid&lt;/em&gt;. Como qualquer documento em HTML, é possível que o usuário crie estilos no formato CSS. A pasta &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; aceita arquivos no formato &lt;em&gt;markdown&lt;/em&gt;, convertendo-os para HTML automaticamente no momento da construção do &lt;em&gt;site&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A plataforma &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; oferece a compilação automática do código do Jekyll, bastando sincronizar os arquivos fonte no repositório. A geração deste &lt;em&gt;blog&lt;/em&gt; é feita quando o código fonte é enviado ao &lt;a href=&quot;https://www.github.com/luigi-finando&quot;&gt;meu repositório&lt;/a&gt; no &lt;a href=&quot;https://www.github.com&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><author><name>Luís</name></author><category term="blog" /><summary type="html"></summary></entry></feed>